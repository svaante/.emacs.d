* Basic stuff to get some type of order
#+BEGIN_SRC emacs-lisp
;; remove gui elements
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1) 
;; remove visual bell
(setq visible-bell       nil
      ring-bell-function #'ignore)

;; set default dir to home
(setq default-directory "~/")

;; follow symlinks
(setq vc-follow-symlinks t)

;; spaces not tabs
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)

;; no backup files
(setq make-backup-files nil)
(global-auto-revert-mode t)

;; y/n will do
(fset 'yes-or-no-p 'y-or-n-p)

;; stop the insessent blinking
(blink-cursor-mode 0)

(setq auto-save-default nil)
#+END_SRC

* Theming
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :ensure t
  :defer t
  :init
  (load-theme 'zenburn t))
#+END_SRC

* Package dashboard
   For that nice start menu dont know if it will be needed at all but trying
   it out
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize)))

(use-package dashboard
    :ensure t
    :config
    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 10)))
    (dashboard-setup-startup-hook))
#+END_SRC

* Stop banganing at init.el
   I dont want all my files being banged at by emacs 
#+BEGIN_SRC emacs-lisp
(use-package cus-edit
:config
  (setq custom-file "~/.emacs.d/custom.el")

  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))

  (load custom-file))
#+END_SRC

* Mac stuff
#+BEGIN_SRC  emacs-lisp
(setq mac-option-key-is-meta t)
(setq mac-right-option-modifier nil)
#+END_SRC
* Relative line numbers
#+BEGIN_SRC emacs-lisp
(use-package linum
  :init
  (add-hook 'prog-mode-hook 'linum-mode))

(use-package linum-relative
  :commands (linum-relative-mode linum-relative-toggle)
  :init
  (setq linum-relative-current-symbol "")
  (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
* Global mappings

#+begin_src emacs-lisp
  (defun +emacs/switch-to-next-buffer ()
    "Switch to next buffer but stop at last buffer"
    (interactive)
    (when (window-next-buffers)
          (switch-to-next-buffer)))

  (defun +emacs/switch-to-prev-buffer ()
    "Switch to prev buffer but stop at last buffer"
    (interactive)
    (when (window-prev-buffers)
          (switch-to-prev-buffer)))

  (defun +emacs/key-bindings ()
    (progn
      (define-key evil-normal-state-map "\C-j" 'evil-window-down)
      (define-key evil-normal-state-map "\C-k" 'evil-window-up)
      (define-key evil-normal-state-map "\C-h" 'evil-window-left)
      (define-key evil-normal-state-map "\C-l" 'evil-window-right)
      (define-key evil-normal-state-map (kbd "C-i") #'+emacs/switch-to-next-buffer)
      (define-key evil-normal-state-map (kbd "C-o") #'+emacs/switch-to-prev-buffer)))
#+end_src
    
* Evil
   Evil configuraton
#+BEGIN_SRC emacs-lisp
  (defun +emacs/split-follow-window-vertically ()
    "Split and follow window vertically"
    (interactive)
    (split-window-vertically) (other-window 1))

  (defun +emacs/split-follow-window-horizontally ()
    "Split and follow window horizontally"
    (interactive)
    (split-window-horizontally) (other-window 1))

  (use-package evil
    :ensure evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq-default evil-symbol-word-search t)
    (setq-default evil-shift-width 2)
    (setq evil-jumps-cross-buffers t)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-want-C-u-scroll t)
    (setq evil-search-module 'evil-search)
    :config
    (+emacs/key-bindings)
    (define-key evil-normal-state-map "\C-ws" #'+emacs/split-follow-window-vertically)
    (define-key evil-normal-state-map "\C-wv" #'+emacs/split-follow-window-horizontally)

    (defalias #'forward-evil-word #'forward-evil-symbol)
    (evil-ex-define-cmd "E[dit]" 'evil-edit)
    (evil-ex-define-cmd "W[rite]" 'evil-write)
    (evil-ex-define-cmd "Wq" 'evil-save-and-close)
    (evil-ex-define-cmd "WQ" 'evil-save-and-close)
    (evil-ex-define-cmd "Wq" 'evil-save-and-close)
    (evil-ex-define-cmd "Qa[ll]" "quitall")
    (evil-ex-define-cmd "qA[ll]" "quitall")
    (evil-ex-define-cmd "QA[ll]" "quitall")

    (evil-mode 1))

  (use-package evil-escape
    :ensure t
    :init
    (setq evil-escape-unordered-key-sequence t)
    (setq-default evil-escape-key-sequence "jk")
    :config
    (evil-escape-mode))

  (use-package evil-leader
    :ensure evil-leader
    :config
    (setq evil-leader/in-all-states 1)
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key "." 'counsel-find-file
                         "b" 'counsel-switch-buffer
                         "t" 'vterm
                         ":" 'counsel-M-x
                         "r" (lambda () (load-file user-init-file))))
#+END_SRC

* Org 
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* Package company
   Use company for packages

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish company-mode
    ;; Use Company for completion
    :bind (("C-<tab>" . company-complete-common)
           :map company-mode-map
           ([remap completion-at-point] . company-complete-common)
           ([remap complete-symbol] . company-complete-common))
    :init (global-company-mode 1)
    :config
      (use-package company-lsp :ensure t)

    (setq tab-always-indent 'complete)
    ;; some better default values
    (setq company-idle-delay 0.2)
    (setq company-tooltip-limit 10)
    (setq company-minimum-prefix-length 1)
    (setq company-selection-wrap-around t)
    (setq company-backends '((company-files
                              company-elisp
                              company-lsp
                              company-yasnippet)
                             (company-dabbrev company-dabbrev-code)))

    ;; align annotations in tooltip
    (setq company-tooltip-align-annotations t)

    ;; nicer keybindings
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous)
    (define-key company-active-map (kbd "K") 'company-show-doc-buffer)

    ;; put most often used completions at stop of list
    (setq company-transformers '(company-sort-by-occurrence)))
#+END_SRC

* Package counsel

#+BEGIN_SRC emacs-lisp

(use-package ivy-posframe
  :ensure t
  :custom
  (ivy-posframe-style 'frame-center)
  (ivy-posframe-display-functions-alist
   '((swiper . ivy-posframe-display-at-window-bottom-left)
     (t . ivy-posframe-display)))
  :config
  (ivy-posframe-mode))

(use-package ivy
  :ensure t
  :config
  (ivy-mode 1)
  ;;(setq ivy-use-virtual-buffers f)
  (setq enable-recursive-minibuffers t))

(use-package swiper
  :ensure t)

(use-package counsel
  :ensure t
  :config
  (setq counsel-ag-base-command "ag --nocolor --nogroup --smart-case --column %s")

  (defun +ivy/projectile-find-file ()
    (interactive)
    (let ((this-command 'counsel-find-file))
      (call-interactively
      (if (or (file-equal-p default-directory "~")
              (file-equal-p default-directory "/"))
              #'counsel-find-file
              (let ((files (projectile-current-project-files)))
                (if (<= (length files) ivy-sort-max-size)
                    #'counsel-projectile-find-file
                  #'projectile-find-file))))))
                 
  (evil-leader/set-key "SPC" '+ivy/projectile-find-file
                       "." 'counsel-find-file))
  
(use-package prescient
  :ensure t
  :config
  (progn
    (use-package ivy-prescient
      :ensure t
      :config
      (ivy-prescient-mode))
    (use-package company-prescient
      :ensure t
      :config
      (company-prescient-mode))
    (prescient-persist-mode)))

#+END_SRC

* LSP 
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init (setq lsp-signature-auto-activate nil)
    :commands (lsp lsp-deferred)
    :hook (prog-mode . lsp-deferred)
    :config
      (defun lsp-mode-configuration ()
        (with-eval-after-load 'evil
          (define-key evil-normal-state-local-map "K" 'lsp-describe-thing-at-point)
          (define-key evil-normal-state-local-map "gd" 'lsp-find-definition)
          (define-key evil-normal-state-local-map "gr" 'lsp-find-references)))

      (add-hook 'lsp-mode-hook 'lsp-mode-configuration))

  ;; TODO: make the window disappear/behave normally && hide line numbers
  (defun my/hide-frame-line-numbers (frame _window)
    "Hides line nunmbers from a specific frame in a winow."
    (select-frame frame)
    (display-line-numbers-mode -1))

  ;(use-package lsp-ui
  ;  :requires (lsp-mode)
  ;  :commands lsp-ui-mode
  ;  :hook (lsp-mode . lsp-ui-mode)
  ;  :config
  ;  (setq lsp-ui-sideline-ignore-duplicate t)
  ;  ;; (add-hook 'lsp-ui-doc-frame-hook #'my/hide-frame-line-numbers)
  ;  )

  (use-package lsp-ivy
    :requires (lsp-mode)
    :commands (lsp-ivy-workspace-symbol lsp-ivy-global-workspace-symbol))

  (use-package company-lsp
    :commands company-lsp
    :config
    (push 'company-lsp company-backends)
    (setq company-lsp-async t
          company-lsp-cache-candidates 'auto
          company-lsp-enable-recompletion t))
  #+end_src

* WD managment
#+begin_src emacs-lisp 

(use-package projectile
  :ensure t
  :init
  (setq projectile-switch-project-action #'projectile-dired)
  :config
  (projectile-mode +1))
 
(use-package counsel-projectile
  :ensure t
  :config
  (evil-leader/set-key "pp" 'counsel-projectile-switch-project
                       "pi" 'projectile-invalidate-cache
                       "pt" 'projectile-test-project
                       "pg" 'projectile-ripgrep)
  (counsel-projectile-mode))

#+end_src

* Terminal
  #+begin_src emacs-lisp
(use-package eshell
    :ensure t
    :config

  (evil-define-key 'normal global-map (kbd "C-j")       'evil-window-down)

  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the current buffer's file."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                       (file-name-directory (buffer-file-name))
                       default-directory))
           (name (car (last (split-string parent "/" t))))
           (b-name (concat "*eshell: " name "*")))
      (if (null (get-buffer b-name))
          (progn 
            (eshell "new")
            (rename-buffer b-name))
          (switch-to-buffer b-name))))

    (evil-leader/set-key "e" 'eshell-here
                         "pe" 'projectile-run-eshell)

    (defun +eshell/goto-end-of-prompt ()
      "Move cursor to the prompt when switching to insert mode (if point isn't
    already there)."
      (interactive)
      (goto-char (point-max))
      (evil-append 1))


    (defun eshell-mode-configuration ()
      (with-eval-after-load 'evil
        (+emacs/key-bindings)
        (define-key evil-normal-state-local-map "\C-ws" (lambda () (interactive)(split-window-vertically) (other-window 1) (eshell "new")))
        (define-key evil-normal-state-local-map "\C-wv" (lambda () (interactive)(split-window-horizontally) (other-window 1) (eshell "new")))
        (define-key evil-insert-state-local-map (kbd "C-r") 'counsel-esh-history))
        (define-key evil-normal-state-local-map (kbd "A") '+eshell/goto-end-of-prompt))

    (add-hook 'eshell-mode-hook 'eshell-mode-configuration))
  #+end_src

  #+RESULTS:
  : t
  
* Magit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :config
  (evil-leader/set-key "gg" 'magit)
  (evil-leader/set-key "gh" 'magit-log-buffer-file))
(use-package evil-magit
  :ensure t)
 #+end_src
* Check spelling inside git commit and markdown
#+begin_src emacs-lisp
(use-package flyspell
  ;; Spell-checking of emacs buffers.
  :diminish (flyspell-mode)
  :commands flyspell-mode
  :init
  (progn
    (add-hook 'git-commit-mode-hook 'flyspell-mode)
    (add-hook 'markdown-mode-hook 'flyspell-mode)))
 #+end_src
  
* Language specific stuff
#+begin_src emacs-lisp
  (use-package flycheck
  :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package go-mode
  :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package yaml-mode
  :ensure t)
#+end_src

#+begin_src emacs-lisp 
(use-package pyenv-mode
  :ensure t
  :hook (python-mode . pyenv-mode))
#+end_src

* REST
#+begin_src emacs-lisp
(use-package restclient
  :ensure t)
#+end_src
* Jupyter notebooks
 #+begin_src emacs-lisp 
 (use-package ein
  :ensure t)
 #+end_src
