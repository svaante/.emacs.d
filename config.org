* Basic stuff to get some type of order
  #+BEGIN_SRC emacs-lisp
    ;; remove gui elements
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1) 

    ;; remove visual bell
    (setq visible-bell       nil
          ring-bell-function #'ignore)

    ;; set default dir to home
    (setq default-directory "~/")

    ;; follow symlinks
    (setq vc-follow-symlinks t)

    ;; spaces not tabs
    (setq-default indent-tabs-mode nil)
    (setq indent-line-function 'insert-tab)

    ;; no backup files
    (setq make-backup-files nil)
    (global-auto-revert-mode t)

    ;; y/n will do
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; stop the insessent blinking
    (blink-cursor-mode 0)

    ;; Truncate that shit
    (use-package simple
      :diminish visual-line-mode)

    ;; Backup trails is worse then chem-trails, losing patches is 99% of the time my fault
    (setq auto-save-default nil)

    ;; Back to basic on extremely long lines 
    (global-so-long-mode 1)

    (set-frame-font "Hack-12" nil t) ;; Set font
    (set-fontset-font t 'symbol (font-spec :family "Apple Color Emoji" :size 9) nil 'prepend) ;; I want my flower

    ;; perf
    (setq gc-cons-threshold 100000000)
    (setq read-process-output-max (* 1024 1024))
  #+END_SRC
  
* Theming
  #+BEGIN_SRC emacs-lisp

  (load-theme 'modus-operandi)

  (use-package acme-theme
    :ensure t
    :config
    ;(load-theme 'acme t)
    )

  (use-package plan9-theme
    :ensure t
    :config
    ;(load-theme 'plan9 t)
    )
    
  (use-package zenburn-theme :ensure t)

  (use-package emacs
    :config
    (setq mode-line-percent-position '(-3 "%p"))
    (setq mode-line-defining-kbd-macro
          (propertize " Macro" 'face 'mode-line-emphasis))
    (setq-default mode-line-format
                  '("ðŸŒ»"
                    "%e"
                    ""
                    mode-line-front-space
                    mode-line-mule-info
                    mode-line-client
                    mode-line-modified
                    mode-line-remote
                    mode-line-frame-identification
                    mode-line-buffer-identification
                    " "
                    mode-line-position
                    (vc-mode vc-mode)
                    " "
                    mode-line-modes
                    " "
                    mode-line-misc-info
                    mode-line-end-spaces))
    :init
    (column-number-mode 1))

  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))

  #+END_SRC
  
* Save my mode-line
  #+begin_src emacs-lisp
(use-package diminish
  :ensure
  :after use-package)

  (use-package undo-tree
  :diminish)
  #+end_src

* Package dashboard
  #+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :diminish
    :ensure t
    :config
    (setq dashboard-items '((recents  . 10)
                            (bookmarks . 10)))
    (dashboard-setup-startup-hook))
  #+END_SRC

* Mac stuff
  #+BEGIN_SRC  emacs-lisp
(if (eq system-type 'darwin)
  (progn
    (setq mac-option-key-is-meta t)
    (setq mac-right-option-modifier nil)
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . light))))
  #+END_SRC

* Relative line numbers
  #+BEGIN_SRC emacs-lisp
      (use-package emacs
        :init
        (setq display-line-numbers-type 'relative)
        (add-hook 'text-mode-hook #'display-line-numbers-mode)
        (add-hook 'prog-mode-hook #'display-line-numbers-mode))
    #+END_SRC

* Whitespace
#+BEGIN_SRC emacs-lisp
  (use-package global-whitespace
    :defer t
    :config
    (setq
      whitespace-style '(tabs tab-mark)
      whitespace-display-mappings '(
        (tab-mark     ?\t    [?\u00BB ?\t] [?\\ ?\t])))
    (global-whitespace-mode t))
#+END_SRC

* Global mappings
  #+begin_src emacs-lisp
  (defun +emacs/switch-to-next-buffer ()
    "Switch to next buffer but stop at last buffer"
    (interactive)
    (when (window-next-buffers)
      (switch-to-next-buffer)))

  (defun +emacs/switch-to-prev-buffer ()
    "Switch to prev buffer but stop at last buffer"
    (interactive)
    (when (window-prev-buffers)
      (switch-to-prev-buffer)))

  (defun +emacs/jump-or-jump (this-jump-fn that-jump-fn)
    "Change buffer and/or cursor position with this-fn or that-fn"
    (interactive)
    (let* ((p (point)))
      (funcall this-jump-fn)
      (when (= p (point))
        (funcall that-jump-fn))))

  (defun +emacs/evil-jump-forward-or-next-buffer ()
    "Jump forward or goto next buffer if there is no prev jump in buffer"
    (interactive)
    (+emacs/jump-or-jump (lambda () (evil--jump-forward 1))
                         '+emacs/switch-to-next-buffer))

  (defun +emacs/evil-jump-backward-or-prev-buffer ()
    "Jump backward or goto prev buffer if there is no prev jump in buffer"
    (interactive)
    (+emacs/jump-or-jump (lambda () (evil--jump-backward 1))
                         '+emacs/switch-to-prev-buffer))


  (defun +emacs/key-bindings ()
    (progn
      (define-key evil-normal-state-map "\C-j" 'evil-window-down)
      (define-key evil-normal-state-map "\C-k" 'evil-window-up)
      (define-key evil-normal-state-map "\C-h" 'evil-window-left)
      (define-key evil-normal-state-map "\C-l" 'evil-window-right)
      (define-key evil-insert-state-map "\C-j" 'evil-window-down)
      (define-key evil-insert-state-map "\C-k" 'evil-window-up)
      (define-key evil-insert-state-map "\C-h" 'evil-window-left)
      (define-key evil-insert-state-map "\C-l" 'evil-window-right)
      (define-key evil-normal-state-map (kbd "C-i") #'+emacs/evil-jump-forward-or-next-buffer)
      (define-key evil-normal-state-map (kbd "C-o") #'+emacs/evil-jump-backward-or-prev-buffer)))
  #+end_src
    
* Evil
  Evil config
  #+BEGIN_SRC emacs-lisp
    (defun +emacs/split-follow-window-vertically ()
      "Split and follow window vertically"
      (interactive)
      (split-window-vertically) (other-window 1))

    (defun +emacs/split-follow-window-horizontally ()
      "Split and follow window horizontally"
      (interactive)
      (split-window-horizontally) (other-window 1))

    (use-package evil
      :ensure evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq-default evil-symbol-word-search t)
      (setq-default evil-shift-width 2)
      (setq evil-jumps-cross-buffers nil)
      (setq evil-want-Y-yank-to-eol t)
      (setq evil-want-C-u-scroll t)
      (setq evil-search-module 'evil-search)
      :config
      (+emacs/key-bindings)
      (define-key evil-normal-state-map "\C-ws" #'+emacs/split-follow-window-vertically)
      (define-key evil-normal-state-map "\C-wv" #'+emacs/split-follow-window-horizontally)

      (evil-define-key 'normal 'global
        ;; select the previously pasted text
        "gp" "`[v`]"
        ;; run the macro in the q register
        "Q" "@q")

      (defalias #'forward-evil-word #'forward-evil-symbol)
      (evil-ex-define-cmd "E[dit]" 'evil-edit)
      (evil-ex-define-cmd "W[rite]" 'evil-write)
      (evil-ex-define-cmd "Wq" 'evil-save-and-close)
      (evil-ex-define-cmd "WQ" 'evil-save-and-close)
      (evil-ex-define-cmd "Wq" 'evil-save-and-close)
      (evil-ex-define-cmd "Qa[ll]" "quitall")
      (evil-ex-define-cmd "qA[ll]" "quitall")
      (evil-ex-define-cmd "QA[ll]" "quitall")

      (setq evil--jumps-buffer-targets "\\*\\(new\\|scratch\\|eshell .*\\)\\*")

      (evil-mode 1)

    (use-package evil-escape
      :diminish
      :ensure t
      :init
      (setq evil-escape-delay 0.2)
      (setq evil-escape-unordered-key-sequence t)
      (setq-default evil-escape-key-sequence "jk")
      :config
      (evil-escape-mode))


    (use-package evil-collection
      :after evil
      :ensure t
      :config
      (setq evil-collection-mode-list (remove 'eshell evil-collection-mode-list))
      (evil-collection-init)))

  #+END_SRC

* Leader mappings
  #+BEGIN_SRC emacs-lisp
    (use-package evil-leader
      :ensure t
      :config
      (setq evil-leader/in-all-states 1)
      (global-evil-leader-mode)
      (evil-leader/set-leader "<SPC>")
      (evil-leader/set-key "." 'counsel-find-file
                           "hh" 'counsel-describe-function
                           "hb" 'counsel-descbinds
                           "hv" 'counsel-describe-variable
                           "b" 'ivy-switch-buffer
                           "y" 'counsel-yank-pop
                           "os" 'counsel-org-goto
                           "i" 'ibuffer
                           "t" 'vterm
                           ":" 'counsel-M-x
                           "r" (lambda () (load-file user-init-file))
                           "wt" (lambda () (interactive) (toggle-frame-maximized))
                           "p!" 'projectile-run-async-shell-command-in-root
                           "on" (lambda () (interactive) (find-file "~/org/notes.org"))
                           "pt" '+emacs/org-projectile-goto-location-for-project))
      #+END_SRC 

* Org 
   #+BEGIN_SRC emacs-lisp
         (use-package evil-org
           :defer t
           :ensure t
           :after org
           :config
           (add-hook 'org-mode-hook 'evil-org-mode)
           (add-hook 'evil-org-mode-hook
                     (lambda ()
                       (evil-org-set-key-theme '(textobjects insert return additional shift todo)))))

          (use-package org-agenda
            :init
            (setq org-agenda-files '("notes.org" "~/org/todo.org"))
            :config
            (evil-leader/set-key "oa" 'org-agenda)

            (setq org-agenda-custom-commands
                  '(("w" "Work agenda"
                     ((tags "+work+TODO=\"IN_PROGRESS\"" ((org-agenda-overriding-header "IN_PROGRESS")))
                      (agenda "" ((tags "work")))
                      (tags "+work+TODO=\"TODO\"" ((org-agenda-overriding-header "TODO")))))))

            (evil-set-initial-state 'org-agenda-mode 'normal)
            (evil-define-key 'normal org-agenda-mode-map
              (kbd "<RET>") 'org-agenda-switch-to
              (kbd "\t") 'org-agenda-goto
              "q" 'org-agenda-quit
              "r" 'org-agenda-redo
              "S" 'org-save-all-org-buffers
              "gj" 'org-agenda-goto-date
              "gJ" 'org-agenda-clock-goto
              "gm" 'org-agenda-bulk-mark
              "go" 'org-agenda-open-link
              "s" 'org-agenda-schedule
              "+" 'org-agenda-priority-up
              "," 'org-agenda-priority
              "-" 'org-agenda-priority-down
              "y" 'org-agenda-todo-yesterday
              "n" 'org-agenda-add-note
              "t" 'org-agenda-todo
              ":" 'org-agenda-set-tags
              ";" 'org-timer-set-timer
              "I" 'helm-org-task-file-headings
              "i" 'org-agenda-clock-in-avy
              "O" 'org-agenda-clock-out-avy
              "u" 'org-agenda-bulk-unmark
              "dd" 'org-agenda-kill
              "x" 'org-agenda-exit
              "j"  'org-agenda-next-line
              "k"  'org-agenda-previous-line
              "vt" 'org-agenda-toggle-time-grid
              "va" 'org-agenda-archives-mode
              "vw" 'org-agenda-week-view
              "vl" 'org-agenda-log-mode
              "vd" 'org-agenda-day-view
              "vc" 'org-agenda-show-clocking-issues
              "g/" 'org-agenda-filter-by-tag
              "o" 'delete-other-windows
              "gh" 'org-agenda-holiday
              "gv" 'org-agenda-view-mode-dispatch
              "f" 'org-agenda-later
              "b" 'org-agenda-earlier
              "c" 'counsel-org-capture
              "e" 'org-agenda-set-effort
              "n" nil  ; evil-search-next
              "{" 'org-agenda-manipulate-query-add-re
              "}" 'org-agenda-manipulate-query-subtract-re
              "A" 'org-agenda-toggle-archive-tag
              "." 'org-agenda-goto-today
              "0" 'evil-digit-argument-or-evil-beginning-of-line
              "<" 'org-agenda-filter-by-category
              ">" 'org-agenda-date-prompt
              "F" 'org-agenda-follow-mode
              "D" 'org-agenda-deadline
              "H" 'org-agenda-do-date-earlier
              "L" 'org-agenda-do-date-later
              "J" 'org-agenda-next-date-line
              "P" 'org-agenda-show-priority
              "R" 'org-agenda-clockreport-mode
              "Z" 'org-agenda-sunrise-sunset
              "T" 'org-agenda-show-tags
              "X" 'org-agenda-clock-cancel
              "[" 'org-agenda-manipulate-query-add
              "g\\" 'org-agenda-filter-by-tag-refine
              "]" 'org-agenda-manipulate-query-subtract)
            )

          (use-package org-capture
            :init
            (setq org-capture-templates '(("t" "Task Entry" entry
                                           (file+headline "~/org/todo.org" "Tasks")
                                           "* %?\n  %t\n")

                                          ("wt" "Work Todo" entry
                                           (file+headline "~/org/todo.org" "Work")
                                           "* TODO %? :work: \n  %t")

                                          ("wn" "Work Note" entry
                                           (file+headline "~/org/todo.org" "Work")
                                           "* TODO %? :inbox: :work: \n  %t")

                                          ("r" "Remember Entry" entry
                                           (file+headline "~/org/todo.org" "Remember")
                                           "* %?\n  %(org-insert-time-stamp (org-read-date nil t \"+1d\"))\n")))
            :config

            (add-hook 'org-capture-mode-hook 'evil-insert-state))

          (use-package org
            :config
            (defun org-mode-configuration ()
              (with-eval-after-load 'evil-collection
                (+emacs/key-bindings)))
            (org-babel-do-load-languages
             'org-babel-load-languages
             '(
               (shell . t)
               (python . t)
               ))
            (add-hook 'org-mode-hook 'org-mode-configuration))

          (use-package ob-async :ensure t)

          (use-package org-bullets
            :ensure t
            :config
            (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC

* Hyperbole
  #+begin_src  emacs-lisp
  (use-package hyperbole
    :diminish
    :ensure t)
  #+end_src

* Package company
  Use company for packages

  #+BEGIN_SRC emacs-lisp
    (use-package company
      :diminish company-mode
      :ensure t
      :config
      (setq company-backends '((company-files company-capf)))
      ;(setq company-idle-delay 0.3)
      ;(setq company-minimum-prefix-length 5)
      (setq company-tooltip-align-annotations t)
      (setq company-global-modes '(not eshell-mode))
      (global-company-mode 1))
  #+END_SRC

* Package counsel
  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :diminish
      :hook (after-init . ivy-mode)
      :config
      (setq ivy-wrap t)
      (setq ivy-height 15)
      (setq ivy-display-style nil)
      (setq ivy-re-builders-alist
            '((counsel-rg            . ivy--regex-plus)
              (counsel-projectile-rg . ivy--regex-plus)
              (swiper                . ivy--regex-plus)
              (t                     . ivy--regex-fuzzy)))
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (define-key ivy-minibuffer-map (kbd "C-SPC") 'ivy-dispatching-done)
      (define-key ivy-minibuffer-map (kbd "S-C-SPC") 'ivy-occur)
      (ivy-mode 1))

    (use-package swiper
      :ensure t
      :config
      (evil-leader/set-key "s" 'swiper))

    (use-package counsel
      :ensure t
      :config
      (setq counsel-ag-base-command "ag --nocolor --nogroup --smart-case --column %s")
      (defun +ivy-git-grep-other-window-action (x)
        "Opens the current candidate in another window."
        (when (string-match "\\`\\(.*?\\):\\([0-9]+\\):\\(.*\\)\\'" x)
          (select-window
           (with-ivy-window
             (let ((file-name   (match-string-no-properties 1 x))
                   (line-number (match-string-no-properties 2 x)))
               (find-file-other-window (expand-file-name file-name (ivy-state-directory ivy-last)))
               (goto-char (point-min))
               (forward-line (1- (string-to-number line-number)))
               (re-search-forward (ivy--regex ivy-text t) (line-end-position) t)
               (run-hooks 'counsel-grep-post-action-hook)
               (selected-window))))))

      (ivy-add-actions
       'counsel-rg
       '(("j" +ivy-git-grep-other-window-action "open in other window")))

      (defun +ivy/projectile-find-file ()
        (interactive)
        (let ((this-command 'counsel-find-file))
          (call-interactively
           (if (or (file-equal-p default-directory "~")
                   (file-equal-p default-directory "/"))
               #'counsel-find-file
             (let ((files (projectile-current-project-files)))
               (if (<= (length files) ivy-sort-max-size)
                   #'counsel-projectile-find-file
                 #'projectile-find-file))))))

      (setq counsel-find-file-at-point t)

      (evil-leader/set-key "SPC" '+ivy/projectile-find-file
        "." 'counsel-find-file))

    (use-package prescient
      :ensure t
      :config
      (progn
        (use-package ivy-prescient
          :ensure t
          :config
          (ivy-prescient-mode))
        (prescient-persist-mode)))
  #+END_SRC

* Compilation
#+begin_src emacs-lisp
    (use-package emacs
      :config
      (defun compilation-mode-configuration ()
        (with-eval-after-load 'evil-collection
          (+emacs/key-bindings)))
      (add-hook 'compilation-mode-hook 'compilation-mode-configuration))
#+end_src

* Dired stuff
  #+begin_src emacs-lisp
    (defun my-dired-mode-setup ()
      "show less information in dired buffers"
      (dired-hide-details-mode 1))
    (add-hook 'dired-mode-hook 'my-dired-mode-setup)

    (use-package dired-subtree
      :ensure t
      :config
      (define-key evil-normal-state-local-map "TAB" 'dired-subtree-toggle))
  #+end_src

* LSP
  #+begin_src emacs-lisp
        (use-package lsp-mode
          :ensure t
          :hook (prog-mode . (lambda ()
                               (unless (derived-mode-p 'emacs-lisp-mode 'lisp-mode)
                                 (lsp-deferred))))
          :config
          (defun lsp-mode-configuration ()
            (with-eval-after-load 'evil
              (define-key evil-normal-state-local-map "K" 'lsp-describe-thing-at-point)
              (define-key evil-normal-state-local-map "gd" 'lsp-find-definition)
              (define-key evil-normal-state-local-map "gr" 'lsp-find-references)))
          (setq lsp-file-watch-threshold 1000)
          (setq lsp-completion-provider :capf)
          ;(setq lsp-idle-delay 0.500)
          (add-hook 'lsp-mode-hook 'lsp-mode-configuration))

        (use-package flycheck
          :ensure t
          :init (add-hook 'prog-mode-hook 'flycheck-mode)
          :config

          (setq-default flycheck-disabled-checkers
                        (append flycheck-disabled-checkers
                                '(javascript-jshint json-jsonlist)))
          (flycheck-add-mode 'javascript-eslint 'js-mode)
          (add-hook 'flycheck-mode-hook 'add-node-modules-path))
  #+end_src

* WD management
  #+begin_src emacs-lisp 
        (use-package projectile
          :ensure t
          :config
          (projectile-mode +1)
          projectile-project-root-files #'( ".projectile" )
          projectile-project-root-files-functions #'(projectile-root-top-down
                                                     projectile-root-top-down-recurring
                                                     projectile-root-bottom-up
                                                     projectile-root-local))
        (use-package counsel-projectile
          :diminish
          :ensure t
          :config
          (setcar counsel-projectile-switch-project-action 4)

          (setq counsel-projectile-org-capture-templates
                '(("p"
                   "[${name}] Project Task"
                   entry (file+headline "${root}/notes.org" "Tasks")
                   "* TODO %?\n  %u\n  %a")))

          (evil-leader/set-key
            "pp" 'counsel-projectile-switch-project
            "pi" 'projectile-invalidate-cache
            "pt" 'projectile-test-project
            "pg" 'projectile-ripgrep
            "pq" 'projectile-toggle-between-implementation-and-test
            "oc" 'counsel-projectile-org-capture
            "pa" 'counsel-projectile-org-agenda
            "pb" 'projectile-switch-to-buffer)
          (counsel-projectile-mode))
  #+end_src

* Terminal
  #+begin_src  emacs-lisp
  (use-package vterm :ensure t)
  #+end_src

  #+begin_src emacs-lisp
          (use-package eshell
            :ensure t
            :config

            (setenv "PAGER" "cat")

      ;; Save command history when commands are entered
      ;(add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

      ;(add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

            (defun eshell-cwd-rename (&optional i)
              "Renames eshell buffer to *eshell <cwd> <number of buffers with this name>*"
              (interactive)
              (unless i (setq i 0))
              (let* ((buffer-cwd (if (buffer-file-name)
                                     (file-name-directory (buffer-file-name))
                                     default-directory))
                     (name (car (last (split-string buffer-cwd "/" t))))
                     (b-name (if (zerop i)
                                 (concat "*eshell " name "*")
                                 (concat "*eshell " name " " (number-to-string i) "*"))))
                (cond ((string= (buffer-name) b-name) nil)
                      ((null (get-buffer b-name)) (rename-buffer b-name))
                      (t (eshell-cwd-rename (1+ i))))))

            (defun eshell-here ()
              "Opens up a new shell in the directory associated with the current buffer's file."
              (interactive)
              (let* ((parent (if (buffer-file-name)
                                 (file-name-directory (buffer-file-name))
                               default-directory))
                     (name (car (last (split-string parent "/" t))))
                     (b-name (concat "*eshell " name "*")))
                (if (null (get-buffer b-name))
                    (let ((buf (eshell "new")))
                      (switch-to-buffer (other-buffer buf))
                      (switch-to-buffer-other-window buf)
                      (rename-buffer b-name))
                  (switch-to-buffer-other-window (get-buffer b-name)))))

            (defun eshell-project-root ()
              (interactive)
              (let ((buf (projectile-run-eshell 1)))
                (switch-to-buffer (other-buffer buf))
                (switch-to-buffer-other-window buf)))

            (evil-leader/set-key "e" 'eshell-here
              "pe" 'eshell-project-root)

            (defun +eshell/goto-end-of-prompt ()
              "Move cursor to the prompt when switching to insert mode (if point isn't
                      already there)."
              (interactive)
              (goto-char (point-max))
              (evil-append 1))

            (defun +eshell/counsel-esh-history-normal ()
              "Move cursor to the end of the buffer before calling counsel-esh-history
                        and change `state` to insert"
              (interactive)
              (goto-char (point-max))
              (evil-insert 0)
              (counsel-esh-history))

            (defun eshell-mode-configuration ()
              (with-eval-after-load 'evil-collection
                (+emacs/key-bindings)
                (define-key evil-normal-state-local-map "I" (lambda () (interactive) (eshell-bol) (evil-insert 1)))
                (define-key evil-normal-state-local-map (kbd "S") (lambda () (interactive) (eshell-bol) (kill-line) (evil-append 1)))
                (define-key evil-normal-state-local-map (kbd "gk") 'eshell-previous-prompt)
                (define-key evil-normal-state-local-map (kbd "gk") 'eshell-next-prompt)
                (define-key evil-normal-state-local-map "\C-ws" (lambda () (interactive) (split-window-vertically) (other-window 1) (eshell "new")))
                (define-key evil-normal-state-local-map "\C-wv" (lambda () (interactive) (split-window-horizontally) (other-window 1) (eshell "new")))
                (define-key evil-normal-state-local-map (kbd "C-r") '+eshell/counsel-esh-history-normal)
                (define-key evil-insert-state-local-map (kbd "C-r") 'counsel-esh-history)
                (define-key evil-normal-state-local-map (kbd "<return>") '+eshell/goto-end-of-prompt)))

            (defun eshell/ff (&rest args)
              (apply #'find-file args))
(require 'em-smart)
(setq eshell-where-to-jump 'begin)
(setq eshell-review-quick-commands nil)
(setq eshell-smart-space-goes-to-end t)

            (add-hook 'eshell-directory-change-hook 'eshell-cwd-rename)
            (add-hook 'eshell-mode-hook 'eshell-mode-configuration))

                                                  ;(use-package eshell-prompt-extras
                                                  ;  :ensure t
                                                  ;  :init
                                                  ;  (setq eshell-highlight-prompt nil
                                                  ;        eshell-prompt-function 'epe-theme-lambda))

  #+end_src

  #+RESULTS:
  : t

* Magit

  #+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    (evil-leader/set-key "gg" 'magit)
    (evil-leader/set-key "gd" 'magit-diff)
    (evil-leader/set-key "gb" 'magit-blame)
    (evil-leader/set-key "gl" 'magit-log-branches)
    (evil-leader/set-key "gc" 'magit-checkout)
    (evil-leader/set-key "gf" 'magit-fetch-all)
    (evil-leader/set-key "gf" 'magit-log-buffer-file))
  (use-package evil-magit
    :ensure t)
(use-package git-link
  :ensure t
  :commands git-link
  :config
  (setq git-link-open-in-browser t)
  (dw/leader-key-def
    "gL"  'git-link))

  #+end_src

* Check spelling inside git commit and markdown
  #+begin_src emacs-lisp
(use-package flyspell
  ;; Spell-checking of emacs buffers.
  :diminish (flyspell-mode)
  :commands flyspell-mode
  :init
  (progn
    (add-hook 'git-commit-mode-hook 'flyspell-mode)
    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'markdown-mode-hook 'flyspell-mode)))
  #+end_src
  
* Language specific stuff
** Readable data files
   #+begin_src emacs-lisp
  (use-package yaml-mode :ensure t)
  (use-package json-mode :ensure t)
   #+end_src
   
** Go
   #+begin_src emacs-lisp
  (use-package go-mode
  :ensure t)
   #+end_src
   
** Clojure
   #+begin_src emacs-lisp
  (use-package clojure-mode :ensure t :defer t)
  (use-package cider :ensure t :defer t)
   #+end_src

** JS and stuff 
   #+begin_src emacs-lisp
     (use-package emacs
       :config
       (setq js-indent-level 2))

     (use-package web-mode
       :ensure t
       :defer t
       :custom
       (web-mode-markup-indent-offset 2)
       (web-mode-css-indent-offset 2)
       (web-mode-code-indent-offset 2)
       :config
       (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
       (add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode)))

     (use-package add-node-modules-path :ensure t)
   #+end_src

** Godot
   #+begin_src emacs-lisp
     (use-package gdscript-mode
       :ensure t
       :config
       (evil-leader/set-key "pr" 'gdscript-godot-run-project)
       (setq gdscript-use-tab-indents nil)
       (setq gdscript-indent-offset 4))
   #+end_src

* Postman
  #+begin_src emacs-lisp
(use-package restclient
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.http\\'" . restclient-mode)))
  #+end_src

* Jupyter notebooks
  #+begin_src emacs-lisp 
   (use-package ein
    :ensure t
    :config
    (setq ein:polymode t))
  #+end_src

* Olivietty for writing
  #+begin_src emacs-lisp
(use-package olivetti
 :ensure t)
  #+end_src

* Eshell functions
#+begin_src emacs-lisp
  (defun eshell/awswhoami (&rest args)
    (let ((profile (getenv "AWS_PROFILE")))
      (message (if (null profile) "default" profile))))

  (defun slurp (f)
    (with-temp-buffer
      (insert-file-contents f)
      (buffer-substring-no-properties
       (point-min)
       (point-max))))

  (defun eshell/awsprofile (&rest args)
    (require 'seq)
    (let* ((matches (seq-filter (apply-partially 'string-match "\^\[*.\]\$")
                                (split-string (slurp "~/.aws/credentials"))))
           (trim (seq-map (lambda (x) (string-trim x "\\[" "\\]")) matches))
           (choice (ivy-read "AWS Profile: " trim)))
      (setenv "AWS_PROFILE" choice)))
#+end_src


